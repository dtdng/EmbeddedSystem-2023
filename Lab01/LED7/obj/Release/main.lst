                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _mask
                                     12 	.globl _main
                                     13 	.globl _TIMER0_ISR
                                     14 	.globl _EXT1_Process
                                     15 	.globl _EXT0_Process
                                     16 	.globl _init_timer
                                     17 	.globl _init_counter
                                     18 	.globl _display_number
                                     19 	.globl _output_7seg_off
                                     20 	.globl _delay
                                     21 	.globl _output_7seg
                                     22 	.globl _CY
                                     23 	.globl _AC
                                     24 	.globl _F0
                                     25 	.globl _RS1
                                     26 	.globl _RS0
                                     27 	.globl _OV
                                     28 	.globl _F1
                                     29 	.globl _P
                                     30 	.globl _PS
                                     31 	.globl _PT1
                                     32 	.globl _PX1
                                     33 	.globl _PT0
                                     34 	.globl _PX0
                                     35 	.globl _RD
                                     36 	.globl _WR
                                     37 	.globl _T1
                                     38 	.globl _T0
                                     39 	.globl _INT1
                                     40 	.globl _INT0
                                     41 	.globl _TXD
                                     42 	.globl _RXD
                                     43 	.globl _P3_7
                                     44 	.globl _P3_6
                                     45 	.globl _P3_5
                                     46 	.globl _P3_4
                                     47 	.globl _P3_3
                                     48 	.globl _P3_2
                                     49 	.globl _P3_1
                                     50 	.globl _P3_0
                                     51 	.globl _EA
                                     52 	.globl _ES
                                     53 	.globl _ET1
                                     54 	.globl _EX1
                                     55 	.globl _ET0
                                     56 	.globl _EX0
                                     57 	.globl _P2_7
                                     58 	.globl _P2_6
                                     59 	.globl _P2_5
                                     60 	.globl _P2_4
                                     61 	.globl _P2_3
                                     62 	.globl _P2_2
                                     63 	.globl _P2_1
                                     64 	.globl _P2_0
                                     65 	.globl _SM0
                                     66 	.globl _SM1
                                     67 	.globl _SM2
                                     68 	.globl _REN
                                     69 	.globl _TB8
                                     70 	.globl _RB8
                                     71 	.globl _TI
                                     72 	.globl _RI
                                     73 	.globl _P1_7
                                     74 	.globl _P1_6
                                     75 	.globl _P1_5
                                     76 	.globl _P1_4
                                     77 	.globl _P1_3
                                     78 	.globl _P1_2
                                     79 	.globl _P1_1
                                     80 	.globl _P1_0
                                     81 	.globl _TF1
                                     82 	.globl _TR1
                                     83 	.globl _TF0
                                     84 	.globl _TR0
                                     85 	.globl _IE1
                                     86 	.globl _IT1
                                     87 	.globl _IE0
                                     88 	.globl _IT0
                                     89 	.globl _P0_7
                                     90 	.globl _P0_6
                                     91 	.globl _P0_5
                                     92 	.globl _P0_4
                                     93 	.globl _P0_3
                                     94 	.globl _P0_2
                                     95 	.globl _P0_1
                                     96 	.globl _P0_0
                                     97 	.globl _B
                                     98 	.globl _ACC
                                     99 	.globl _PSW
                                    100 	.globl _IP
                                    101 	.globl _P3
                                    102 	.globl _IE
                                    103 	.globl _P2
                                    104 	.globl _SBUF
                                    105 	.globl _SCON
                                    106 	.globl _P1
                                    107 	.globl _TH1
                                    108 	.globl _TH0
                                    109 	.globl _TL1
                                    110 	.globl _TL0
                                    111 	.globl _TMOD
                                    112 	.globl _TCON
                                    113 	.globl _PCON
                                    114 	.globl _DPH
                                    115 	.globl _DPL
                                    116 	.globl _SP
                                    117 	.globl _P0
                                    118 	.globl _x
                                    119 	.globl _count
                                    120 ;--------------------------------------------------------
                                    121 ; special function registers
                                    122 ;--------------------------------------------------------
                                    123 	.area RSEG    (ABS,DATA)
      000000                        124 	.org 0x0000
                           000080   125 _P0	=	0x0080
                           000081   126 _SP	=	0x0081
                           000082   127 _DPL	=	0x0082
                           000083   128 _DPH	=	0x0083
                           000087   129 _PCON	=	0x0087
                           000088   130 _TCON	=	0x0088
                           000089   131 _TMOD	=	0x0089
                           00008A   132 _TL0	=	0x008a
                           00008B   133 _TL1	=	0x008b
                           00008C   134 _TH0	=	0x008c
                           00008D   135 _TH1	=	0x008d
                           000090   136 _P1	=	0x0090
                           000098   137 _SCON	=	0x0098
                           000099   138 _SBUF	=	0x0099
                           0000A0   139 _P2	=	0x00a0
                           0000A8   140 _IE	=	0x00a8
                           0000B0   141 _P3	=	0x00b0
                           0000B8   142 _IP	=	0x00b8
                           0000D0   143 _PSW	=	0x00d0
                           0000E0   144 _ACC	=	0x00e0
                           0000F0   145 _B	=	0x00f0
                                    146 ;--------------------------------------------------------
                                    147 ; special function bits
                                    148 ;--------------------------------------------------------
                                    149 	.area RSEG    (ABS,DATA)
      000000                        150 	.org 0x0000
                           000080   151 _P0_0	=	0x0080
                           000081   152 _P0_1	=	0x0081
                           000082   153 _P0_2	=	0x0082
                           000083   154 _P0_3	=	0x0083
                           000084   155 _P0_4	=	0x0084
                           000085   156 _P0_5	=	0x0085
                           000086   157 _P0_6	=	0x0086
                           000087   158 _P0_7	=	0x0087
                           000088   159 _IT0	=	0x0088
                           000089   160 _IE0	=	0x0089
                           00008A   161 _IT1	=	0x008a
                           00008B   162 _IE1	=	0x008b
                           00008C   163 _TR0	=	0x008c
                           00008D   164 _TF0	=	0x008d
                           00008E   165 _TR1	=	0x008e
                           00008F   166 _TF1	=	0x008f
                           000090   167 _P1_0	=	0x0090
                           000091   168 _P1_1	=	0x0091
                           000092   169 _P1_2	=	0x0092
                           000093   170 _P1_3	=	0x0093
                           000094   171 _P1_4	=	0x0094
                           000095   172 _P1_5	=	0x0095
                           000096   173 _P1_6	=	0x0096
                           000097   174 _P1_7	=	0x0097
                           000098   175 _RI	=	0x0098
                           000099   176 _TI	=	0x0099
                           00009A   177 _RB8	=	0x009a
                           00009B   178 _TB8	=	0x009b
                           00009C   179 _REN	=	0x009c
                           00009D   180 _SM2	=	0x009d
                           00009E   181 _SM1	=	0x009e
                           00009F   182 _SM0	=	0x009f
                           0000A0   183 _P2_0	=	0x00a0
                           0000A1   184 _P2_1	=	0x00a1
                           0000A2   185 _P2_2	=	0x00a2
                           0000A3   186 _P2_3	=	0x00a3
                           0000A4   187 _P2_4	=	0x00a4
                           0000A5   188 _P2_5	=	0x00a5
                           0000A6   189 _P2_6	=	0x00a6
                           0000A7   190 _P2_7	=	0x00a7
                           0000A8   191 _EX0	=	0x00a8
                           0000A9   192 _ET0	=	0x00a9
                           0000AA   193 _EX1	=	0x00aa
                           0000AB   194 _ET1	=	0x00ab
                           0000AC   195 _ES	=	0x00ac
                           0000AF   196 _EA	=	0x00af
                           0000B0   197 _P3_0	=	0x00b0
                           0000B1   198 _P3_1	=	0x00b1
                           0000B2   199 _P3_2	=	0x00b2
                           0000B3   200 _P3_3	=	0x00b3
                           0000B4   201 _P3_4	=	0x00b4
                           0000B5   202 _P3_5	=	0x00b5
                           0000B6   203 _P3_6	=	0x00b6
                           0000B7   204 _P3_7	=	0x00b7
                           0000B0   205 _RXD	=	0x00b0
                           0000B1   206 _TXD	=	0x00b1
                           0000B2   207 _INT0	=	0x00b2
                           0000B3   208 _INT1	=	0x00b3
                           0000B4   209 _T0	=	0x00b4
                           0000B5   210 _T1	=	0x00b5
                           0000B6   211 _WR	=	0x00b6
                           0000B7   212 _RD	=	0x00b7
                           0000B8   213 _PX0	=	0x00b8
                           0000B9   214 _PT0	=	0x00b9
                           0000BA   215 _PX1	=	0x00ba
                           0000BB   216 _PT1	=	0x00bb
                           0000BC   217 _PS	=	0x00bc
                           0000D0   218 _P	=	0x00d0
                           0000D1   219 _F1	=	0x00d1
                           0000D2   220 _OV	=	0x00d2
                           0000D3   221 _RS0	=	0x00d3
                           0000D4   222 _RS1	=	0x00d4
                           0000D5   223 _F0	=	0x00d5
                           0000D6   224 _AC	=	0x00d6
                           0000D7   225 _CY	=	0x00d7
                                    226 ;--------------------------------------------------------
                                    227 ; overlayable register banks
                                    228 ;--------------------------------------------------------
                                    229 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        230 	.ds 8
                                    231 ;--------------------------------------------------------
                                    232 ; internal ram data
                                    233 ;--------------------------------------------------------
                                    234 	.area DSEG    (DATA)
      000000                        235 _count::
      000000                        236 	.ds 2
      000002                        237 _x::
      000002                        238 	.ds 2
                                    239 ;--------------------------------------------------------
                                    240 ; overlayable items in internal ram
                                    241 ;--------------------------------------------------------
                                    242 	.area	OSEG    (OVR,DATA)
                                    243 	.area	OSEG    (OVR,DATA)
                                    244 ;--------------------------------------------------------
                                    245 ; Stack segment in internal ram
                                    246 ;--------------------------------------------------------
                                    247 	.area	SSEG
      000000                        248 __start__stack:
      000000                        249 	.ds	1
                                    250 
                                    251 ;--------------------------------------------------------
                                    252 ; indirectly addressable internal ram data
                                    253 ;--------------------------------------------------------
                                    254 	.area ISEG    (DATA)
                                    255 ;--------------------------------------------------------
                                    256 ; absolute internal ram data
                                    257 ;--------------------------------------------------------
                                    258 	.area IABS    (ABS,DATA)
                                    259 	.area IABS    (ABS,DATA)
                                    260 ;--------------------------------------------------------
                                    261 ; bit data
                                    262 ;--------------------------------------------------------
                                    263 	.area BSEG    (BIT)
                                    264 ;--------------------------------------------------------
                                    265 ; paged external ram data
                                    266 ;--------------------------------------------------------
                                    267 	.area PSEG    (PAG,XDATA)
                                    268 ;--------------------------------------------------------
                                    269 ; external ram data
                                    270 ;--------------------------------------------------------
                                    271 	.area XSEG    (XDATA)
                                    272 ;--------------------------------------------------------
                                    273 ; absolute external ram data
                                    274 ;--------------------------------------------------------
                                    275 	.area XABS    (ABS,XDATA)
                                    276 ;--------------------------------------------------------
                                    277 ; external initialized ram data
                                    278 ;--------------------------------------------------------
                                    279 	.area XISEG   (XDATA)
                                    280 	.area HOME    (CODE)
                                    281 	.area GSINIT0 (CODE)
                                    282 	.area GSINIT1 (CODE)
                                    283 	.area GSINIT2 (CODE)
                                    284 	.area GSINIT3 (CODE)
                                    285 	.area GSINIT4 (CODE)
                                    286 	.area GSINIT5 (CODE)
                                    287 	.area GSINIT  (CODE)
                                    288 	.area GSFINAL (CODE)
                                    289 	.area CSEG    (CODE)
                                    290 ;--------------------------------------------------------
                                    291 ; interrupt vector
                                    292 ;--------------------------------------------------------
                                    293 	.area HOME    (CODE)
      000000                        294 __interrupt_vect:
      000000 02r00r00         [24]  295 	ljmp	__sdcc_gsinit_startup
      000003 02r00rD0         [24]  296 	ljmp	_EXT0_Process
      000006                        297 	.ds	5
      00000B 02r00rFB         [24]  298 	ljmp	_TIMER0_ISR
      00000E                        299 	.ds	5
      000013 02r00rE5         [24]  300 	ljmp	_EXT1_Process
                                    301 ;--------------------------------------------------------
                                    302 ; global & static initialisations
                                    303 ;--------------------------------------------------------
                                    304 	.area HOME    (CODE)
                                    305 	.area GSINIT  (CODE)
                                    306 	.area GSFINAL (CODE)
                                    307 	.area GSINIT  (CODE)
                                    308 	.globl __sdcc_gsinit_startup
                                    309 	.globl __sdcc_program_startup
                                    310 	.globl __start__stack
                                    311 	.globl __mcs51_genXINIT
                                    312 	.globl __mcs51_genXRAMCLEAR
                                    313 	.globl __mcs51_genRAMCLEAR
                                    314 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  315 	ljmp	__sdcc_program_startup
                                    316 ;--------------------------------------------------------
                                    317 ; Home
                                    318 ;--------------------------------------------------------
                                    319 	.area HOME    (CODE)
                                    320 	.area HOME    (CODE)
      000016                        321 __sdcc_program_startup:
      000016 02r01r2C         [24]  322 	ljmp	_main
                                    323 ;	return from main will return to caller
                                    324 ;--------------------------------------------------------
                                    325 ; code
                                    326 ;--------------------------------------------------------
                                    327 	.area CSEG    (CODE)
                                    328 ;------------------------------------------------------------
                                    329 ;Allocation info for local variables in function 'output_7seg'
                                    330 ;------------------------------------------------------------
                                    331 ;value                     Allocated to registers r7 
                                    332 ;------------------------------------------------------------
                                    333 ;	main.c:20: void output_7seg(unsigned char value)
                                    334 ;	-----------------------------------------
                                    335 ;	 function output_7seg
                                    336 ;	-----------------------------------------
      000000                        337 _output_7seg:
                           000007   338 	ar7 = 0x07
                           000006   339 	ar6 = 0x06
                           000005   340 	ar5 = 0x05
                           000004   341 	ar4 = 0x04
                           000003   342 	ar3 = 0x03
                           000002   343 	ar2 = 0x02
                           000001   344 	ar1 = 0x01
                           000000   345 	ar0 = 0x00
      000000 AF 82            [24]  346 	mov	r7,dpl
                                    347 ;	main.c:22: if(value < 10)
      000002 BF 0A 00         [24]  348 	cjne	r7,#0x0a,00109$
      000005                        349 00109$:
      000005 50 07            [24]  350 	jnc	00103$
                                    351 ;	main.c:24: P0=mask[value];
      000007 EF               [12]  352 	mov	a,r7
      000008 90r00r00         [24]  353 	mov	dptr,#_mask
      00000B 93               [24]  354 	movc	a,@a+dptr
      00000C F5 80            [12]  355 	mov	_P0,a
      00000E                        356 00103$:
                                    357 ;	main.c:26: }
      00000E 22               [24]  358 	ret
                                    359 ;------------------------------------------------------------
                                    360 ;Allocation info for local variables in function 'delay'
                                    361 ;------------------------------------------------------------
                                    362 ;n                         Allocated to registers r6 r7 
                                    363 ;i                         Allocated to registers r4 r5 
                                    364 ;j                         Allocated to registers r2 r3 
                                    365 ;------------------------------------------------------------
                                    366 ;	main.c:28: void delay(int n){
                                    367 ;	-----------------------------------------
                                    368 ;	 function delay
                                    369 ;	-----------------------------------------
      00000F                        370 _delay:
      00000F AE 82            [24]  371 	mov	r6,dpl
      000011 AF 83            [24]  372 	mov	r7,dph
                                    373 ;	main.c:30: for(i=0; i<100; i++)
      000013 7C 00            [12]  374 	mov	r4,#0x00
      000015 7D 00            [12]  375 	mov	r5,#0x00
                                    376 ;	main.c:31: for(j=0; j<n; j++);
      000017                        377 00111$:
      000017 7A 00            [12]  378 	mov	r2,#0x00
      000019 7B 00            [12]  379 	mov	r3,#0x00
      00001B                        380 00104$:
      00001B C3               [12]  381 	clr	c
      00001C EA               [12]  382 	mov	a,r2
      00001D 9E               [12]  383 	subb	a,r6
      00001E EB               [12]  384 	mov	a,r3
      00001F 64 80            [12]  385 	xrl	a,#0x80
      000021 8F F0            [24]  386 	mov	b,r7
      000023 63 F0 80         [24]  387 	xrl	b,#0x80
      000026 95 F0            [12]  388 	subb	a,b
      000028 50 07            [24]  389 	jnc	00107$
      00002A 0A               [12]  390 	inc	r2
      00002B BA 00 ED         [24]  391 	cjne	r2,#0x00,00104$
      00002E 0B               [12]  392 	inc	r3
      00002F 80 EA            [24]  393 	sjmp	00104$
      000031                        394 00107$:
                                    395 ;	main.c:30: for(i=0; i<100; i++)
      000031 0C               [12]  396 	inc	r4
      000032 BC 00 01         [24]  397 	cjne	r4,#0x00,00126$
      000035 0D               [12]  398 	inc	r5
      000036                        399 00126$:
      000036 C3               [12]  400 	clr	c
      000037 EC               [12]  401 	mov	a,r4
      000038 94 64            [12]  402 	subb	a,#0x64
      00003A ED               [12]  403 	mov	a,r5
      00003B 64 80            [12]  404 	xrl	a,#0x80
      00003D 94 80            [12]  405 	subb	a,#0x80
      00003F 40 D6            [24]  406 	jc	00111$
                                    407 ;	main.c:32: }
      000041 22               [24]  408 	ret
                                    409 ;------------------------------------------------------------
                                    410 ;Allocation info for local variables in function 'output_7seg_off'
                                    411 ;------------------------------------------------------------
                                    412 ;	main.c:34: void output_7seg_off(){
                                    413 ;	-----------------------------------------
                                    414 ;	 function output_7seg_off
                                    415 ;	-----------------------------------------
      000042                        416 _output_7seg_off:
                                    417 ;	main.c:35: }
      000042 22               [24]  418 	ret
                                    419 ;------------------------------------------------------------
                                    420 ;Allocation info for local variables in function 'display_number'
                                    421 ;------------------------------------------------------------
                                    422 ;iNum                      Allocated to registers r7 
                                    423 ;i                         Allocated to registers r6 
                                    424 ;temp                      Allocated to registers r2 
                                    425 ;------------------------------------------------------------
                                    426 ;	main.c:39: void display_number(unsigned char iNum){
                                    427 ;	-----------------------------------------
                                    428 ;	 function display_number
                                    429 ;	-----------------------------------------
      000043                        430 _display_number:
      000043 AF 82            [24]  431 	mov	r7,dpl
                                    432 ;	main.c:42: for(i=0; i<3; i++){
      000045 7E 00            [12]  433 	mov	r6,#0x00
      000047                        434 00102$:
                                    435 ;	main.c:43: temp = iNum % 10;
      000047 8F 04            [24]  436 	mov	ar4,r7
      000049 7D 00            [12]  437 	mov	r5,#0x00
      00004B 75*00 0A         [24]  438 	mov	__modsint_PARM_2,#0x0a
                                    439 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      00004E 8D*01            [24]  440 	mov	(__modsint_PARM_2 + 1),r5
      000050 8C 82            [24]  441 	mov	dpl,r4
      000052 8D 83            [24]  442 	mov	dph,r5
      000054 C0 06            [24]  443 	push	ar6
      000056 C0 05            [24]  444 	push	ar5
      000058 C0 04            [24]  445 	push	ar4
      00005A 12r00r00         [24]  446 	lcall	__modsint
      00005D AA 82            [24]  447 	mov	r2,dpl
      00005F D0 04            [24]  448 	pop	ar4
      000061 D0 05            [24]  449 	pop	ar5
                                    450 ;	main.c:44: iNum = iNum / 10;
      000063 75*00 0A         [24]  451 	mov	__divsint_PARM_2,#0x0a
      000066 75*01 00         [24]  452 	mov	(__divsint_PARM_2 + 1),#0x00
      000069 8C 82            [24]  453 	mov	dpl,r4
      00006B 8D 83            [24]  454 	mov	dph,r5
      00006D C0 02            [24]  455 	push	ar2
      00006F 12r00r00         [24]  456 	lcall	__divsint
      000072 AC 82            [24]  457 	mov	r4,dpl
      000074 D0 02            [24]  458 	pop	ar2
      000076 D0 06            [24]  459 	pop	ar6
      000078 8C 07            [24]  460 	mov	ar7,r4
                                    461 ;	main.c:45: LED7SEG_ADDR0 = i & 0x01;
      00007A EE               [12]  462 	mov	a,r6
      00007B 54 01            [12]  463 	anl	a,#0x01
                                    464 ;	assignBit
      00007D 24 FF            [12]  465 	add	a,#0xff
      00007F 92 A2            [24]  466 	mov	_P2_2,c
                                    467 ;	main.c:46: LED7SEG_ADDR1 = i & 0x02;
      000081 EE               [12]  468 	mov	a,r6
      000082 03               [12]  469 	rr	a
      000083 54 01            [12]  470 	anl	a,#0x01
                                    471 ;	assignBit
      000085 24 FF            [12]  472 	add	a,#0xff
      000087 92 A3            [24]  473 	mov	_P2_3,c
                                    474 ;	main.c:47: LED7SEG_ADDR2 = i & 0x04;
      000089 EE               [12]  475 	mov	a,r6
      00008A 03               [12]  476 	rr	a
      00008B 03               [12]  477 	rr	a
      00008C 54 01            [12]  478 	anl	a,#0x01
                                    479 ;	assignBit
      00008E 24 FF            [12]  480 	add	a,#0xff
      000090 92 A4            [24]  481 	mov	_P2_4,c
                                    482 ;	main.c:48: output_7seg(temp);
      000092 8A 82            [24]  483 	mov	dpl,r2
      000094 C0 07            [24]  484 	push	ar7
      000096 C0 06            [24]  485 	push	ar6
      000098 12r00r00         [24]  486 	lcall	_output_7seg
                                    487 ;	main.c:49: delay(1);
      00009B 90 00 01         [24]  488 	mov	dptr,#0x0001
      00009E 12r00r0F         [24]  489 	lcall	_delay
      0000A1 D0 06            [24]  490 	pop	ar6
      0000A3 D0 07            [24]  491 	pop	ar7
                                    492 ;	main.c:42: for(i=0; i<3; i++){
      0000A5 0E               [12]  493 	inc	r6
      0000A6 BE 03 00         [24]  494 	cjne	r6,#0x03,00111$
      0000A9                        495 00111$:
      0000A9 40 9C            [24]  496 	jc	00102$
                                    497 ;	main.c:52: }
      0000AB 22               [24]  498 	ret
                                    499 ;------------------------------------------------------------
                                    500 ;Allocation info for local variables in function 'init_counter'
                                    501 ;------------------------------------------------------------
                                    502 ;	main.c:56: void init_counter(){
                                    503 ;	-----------------------------------------
                                    504 ;	 function init_counter
                                    505 ;	-----------------------------------------
      0000AC                        506 _init_counter:
                                    507 ;	main.c:57: P3_2 = 1; //3_2 input for interrupt 0
                                    508 ;	assignBit
      0000AC D2 B2            [12]  509 	setb	_P3_2
                                    510 ;	main.c:58: EX0 = 1; //Cho phep ngat ngoai 0
                                    511 ;	assignBit
      0000AE D2 A8            [12]  512 	setb	_EX0
                                    513 ;	main.c:59: IT0 = 1; //Ngat theo suon
                                    514 ;	assignBit
      0000B0 D2 88            [12]  515 	setb	_IT0
                                    516 ;	main.c:60: EA = 1; //Global interrupt
                                    517 ;	assignBit
      0000B2 D2 AF            [12]  518 	setb	_EA
                                    519 ;	main.c:61: EX1 = 1;
                                    520 ;	assignBit
      0000B4 D2 AA            [12]  521 	setb	_EX1
                                    522 ;	main.c:62: IT1 = 1;
                                    523 ;	assignBit
      0000B6 D2 8A            [12]  524 	setb	_IT1
                                    525 ;	main.c:63: }
      0000B8 22               [24]  526 	ret
                                    527 ;------------------------------------------------------------
                                    528 ;Allocation info for local variables in function 'init_timer'
                                    529 ;------------------------------------------------------------
                                    530 ;	main.c:65: void init_timer(){
                                    531 ;	-----------------------------------------
                                    532 ;	 function init_timer
                                    533 ;	-----------------------------------------
      0000B9                        534 _init_timer:
                                    535 ;	main.c:66: count = 0;
      0000B9 E4               [12]  536 	clr	a
      0000BA F5*00            [12]  537 	mov	_count,a
      0000BC F5*01            [12]  538 	mov	(_count + 1),a
                                    539 ;	main.c:67: LED7SEG_DATA = 0x00;
                                    540 ;	1-genFromRTrack replaced	mov	_P0,#0x00
      0000BE F5 80            [12]  541 	mov	_P0,a
                                    542 ;	main.c:71: TMOD = 0x01;    //timer 0 mode 1
      0000C0 75 89 01         [24]  543 	mov	_TMOD,#0x01
                                    544 ;	main.c:72: TH0 = TH0_50ms;
      0000C3 75 8C 4C         [24]  545 	mov	_TH0,#0x4c
                                    546 ;	main.c:73: TL0 = TL0_50ms;
                                    547 ;	1-genFromRTrack replaced	mov	_TL0,#0x00
      0000C6 F5 8A            [12]  548 	mov	_TL0,a
                                    549 ;	main.c:77: IE  = 0b10000010;
      0000C8 75 A8 82         [24]  550 	mov	_IE,#0x82
                                    551 ;	main.c:78: TF0 = 0;
                                    552 ;	assignBit
      0000CB C2 8D            [12]  553 	clr	_TF0
                                    554 ;	main.c:79: TR0 = 1;
                                    555 ;	assignBit
      0000CD D2 8C            [12]  556 	setb	_TR0
                                    557 ;	main.c:80: }
      0000CF 22               [24]  558 	ret
                                    559 ;------------------------------------------------------------
                                    560 ;Allocation info for local variables in function 'EXT0_Process'
                                    561 ;------------------------------------------------------------
                                    562 ;	main.c:83: void EXT0_Process() __interrupt IE0_VECTOR
                                    563 ;	-----------------------------------------
                                    564 ;	 function EXT0_Process
                                    565 ;	-----------------------------------------
      0000D0                        566 _EXT0_Process:
      0000D0 C0 E0            [24]  567 	push	acc
      0000D2 C0 D0            [24]  568 	push	psw
                                    569 ;	main.c:85: EA=0; //Cam ngat
                                    570 ;	assignBit
      0000D4 C2 AF            [12]  571 	clr	_EA
                                    572 ;	main.c:86: count++;
      0000D6 05*00            [12]  573 	inc	_count
      0000D8 E4               [12]  574 	clr	a
      0000D9 B5*00 02         [24]  575 	cjne	a,_count,00103$
      0000DC 05*01            [12]  576 	inc	(_count + 1)
      0000DE                        577 00103$:
                                    578 ;	main.c:87: EA=1; //Cho phep ngat
                                    579 ;	assignBit
      0000DE D2 AF            [12]  580 	setb	_EA
                                    581 ;	main.c:88: }
      0000E0 D0 D0            [24]  582 	pop	psw
      0000E2 D0 E0            [24]  583 	pop	acc
      0000E4 32               [24]  584 	reti
                                    585 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    586 ;	eliminated unneeded push/pop dpl
                                    587 ;	eliminated unneeded push/pop dph
                                    588 ;	eliminated unneeded push/pop b
                                    589 ;------------------------------------------------------------
                                    590 ;Allocation info for local variables in function 'EXT1_Process'
                                    591 ;------------------------------------------------------------
                                    592 ;	main.c:90: void EXT1_Process() __interrupt IE1_VECTOR
                                    593 ;	-----------------------------------------
                                    594 ;	 function EXT1_Process
                                    595 ;	-----------------------------------------
      0000E5                        596 _EXT1_Process:
      0000E5 C0 E0            [24]  597 	push	acc
      0000E7 C0 D0            [24]  598 	push	psw
                                    599 ;	main.c:92: EA=0; //Cam ngat
                                    600 ;	assignBit
      0000E9 C2 AF            [12]  601 	clr	_EA
                                    602 ;	main.c:93: count--;
      0000EB 15*00            [12]  603 	dec	_count
      0000ED 74 FF            [12]  604 	mov	a,#0xff
      0000EF B5*00 02         [24]  605 	cjne	a,_count,00103$
      0000F2 15*01            [12]  606 	dec	(_count + 1)
      0000F4                        607 00103$:
                                    608 ;	main.c:94: EA=1; //Cho phep ngat
                                    609 ;	assignBit
      0000F4 D2 AF            [12]  610 	setb	_EA
                                    611 ;	main.c:95: }
      0000F6 D0 D0            [24]  612 	pop	psw
      0000F8 D0 E0            [24]  613 	pop	acc
      0000FA 32               [24]  614 	reti
                                    615 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    616 ;	eliminated unneeded push/pop dpl
                                    617 ;	eliminated unneeded push/pop dph
                                    618 ;	eliminated unneeded push/pop b
                                    619 ;------------------------------------------------------------
                                    620 ;Allocation info for local variables in function 'TIMER0_ISR'
                                    621 ;------------------------------------------------------------
                                    622 ;	main.c:98: void TIMER0_ISR() __interrupt TF0_VECTOR
                                    623 ;	-----------------------------------------
                                    624 ;	 function TIMER0_ISR
                                    625 ;	-----------------------------------------
      0000FB                        626 _TIMER0_ISR:
      0000FB C0 E0            [24]  627 	push	acc
      0000FD C0 D0            [24]  628 	push	psw
                                    629 ;	main.c:100: TH0 = TH0_50ms;
      0000FF 75 8C 4C         [24]  630 	mov	_TH0,#0x4c
                                    631 ;	main.c:101: TL0 = TL0_50ms;
      000102 75 8A 00         [24]  632 	mov	_TL0,#0x00
                                    633 ;	main.c:102: x++;
      000105 05*02            [12]  634 	inc	_x
      000107 E4               [12]  635 	clr	a
      000108 B5*02 02         [24]  636 	cjne	a,_x,00109$
      00010B 05*03            [12]  637 	inc	(_x + 1)
      00010D                        638 00109$:
                                    639 ;	main.c:103: if(x==20){
      00010D 74 14            [12]  640 	mov	a,#0x14
      00010F B5*02 06         [24]  641 	cjne	a,_x,00110$
      000112 E4               [12]  642 	clr	a
      000113 B5*03 02         [24]  643 	cjne	a,(_x + 1),00110$
      000116 80 02            [24]  644 	sjmp	00111$
      000118                        645 00110$:
      000118 80 0D            [24]  646 	sjmp	00103$
      00011A                        647 00111$:
                                    648 ;	main.c:104: count++;
      00011A 05*00            [12]  649 	inc	_count
      00011C E4               [12]  650 	clr	a
      00011D B5*00 02         [24]  651 	cjne	a,_count,00112$
      000120 05*01            [12]  652 	inc	(_count + 1)
      000122                        653 00112$:
                                    654 ;	main.c:105: x=0;
      000122 E4               [12]  655 	clr	a
      000123 F5*02            [12]  656 	mov	_x,a
      000125 F5*03            [12]  657 	mov	(_x + 1),a
      000127                        658 00103$:
                                    659 ;	main.c:107: }
      000127 D0 D0            [24]  660 	pop	psw
      000129 D0 E0            [24]  661 	pop	acc
      00012B 32               [24]  662 	reti
                                    663 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    664 ;	eliminated unneeded push/pop dpl
                                    665 ;	eliminated unneeded push/pop dph
                                    666 ;	eliminated unneeded push/pop b
                                    667 ;------------------------------------------------------------
                                    668 ;Allocation info for local variables in function 'main'
                                    669 ;------------------------------------------------------------
                                    670 ;	main.c:109: void main(){
                                    671 ;	-----------------------------------------
                                    672 ;	 function main
                                    673 ;	-----------------------------------------
      00012C                        674 _main:
                                    675 ;	main.c:110: init_timer();
      00012C 12r00rB9         [24]  676 	lcall	_init_timer
                                    677 ;	main.c:111: while(1){
      00012F                        678 00102$:
                                    679 ;	main.c:112: display_number(count);
      00012F 85*00 82         [24]  680 	mov	dpl,_count
      000132 12r00r43         [24]  681 	lcall	_display_number
                                    682 ;	main.c:114: }
      000135 80 F8            [24]  683 	sjmp	00102$
                                    684 	.area CSEG    (CODE)
                                    685 	.area CONST   (CODE)
      000000                        686 _mask:
      000000 3F                     687 	.db #0x3f	; 63
      000001 06                     688 	.db #0x06	; 6
      000002 5B                     689 	.db #0x5b	; 91
      000003 4F                     690 	.db #0x4f	; 79	'O'
      000004 66                     691 	.db #0x66	; 102	'f'
      000005 6D                     692 	.db #0x6d	; 109	'm'
      000006 7D                     693 	.db #0x7d	; 125
      000007 07                     694 	.db #0x07	; 7
      000008 7F                     695 	.db #0x7f	; 127
      000009 6F                     696 	.db #0x6f	; 111	'o'
                                    697 	.area XINIT   (CODE)
                                    698 	.area CABS    (ABS,CODE)
